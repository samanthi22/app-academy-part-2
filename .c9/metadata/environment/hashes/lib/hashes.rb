{"filter":false,"title":"hashes.rb","tooltip":"/hashes/lib/hashes.rb","undoManager":{"mark":3,"position":3,"stack":[[{"start":{"row":140,"column":33},"end":{"row":141,"column":0},"action":"insert","lines":["",""],"id":2},{"start":{"row":141,"column":0},"end":{"row":141,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":141,"column":4},"end":{"row":146,"column":28},"action":"insert","lines":["int = 0","    hash = Hash.new(0)","    specimens.each do |value|","        hash[value] += 1","    end","    return hash.keys.size**2"],"id":3}],[{"start":{"row":154,"column":0},"end":{"row":159,"column":0},"action":"remove","lines":["def can_tweak_sign?(normal_sign, vandalized_sign)","end","","def character_count(str)","end",""],"id":4},{"start":{"row":154,"column":0},"end":{"row":193,"column":3},"action":"insert","lines":["def can_tweak_sign?(normal_sign, vandalized_sign)","    normal_sign = normal_sign.downcase.gsub(/[^[:word:]\\s]/, \"\").gsub(/\\s+/, \"\")","    vandalized_sign = vandalized_sign.downcase.gsub(/[^[:word:]\\s]/, \"\").gsub(/\\s+/, \"\")","    length = vandalized_sign.length","    (normal_sign.length - length+1).times do |i|","        #byebug","        puts normal_sign[i..length-1+i]","        puts vandalized_sign","        if anagram(normal_sign[i..length-1+i], vandalized_sign)","            return true","        end","        i += 1","    end","    return false","end","","def character_count(str)","end","","def anagram(word1, word2) ","   hash1 = Hash.new(0)","   word1 = word1.chars","   word1.each do |ch|","       hash1[ch] += 1","   end","   sorted1 = hash1.sort_by { |key, value| key }","   hash2 = Hash.new(0)","   word2 = word2.chars","   word2.each do |ch|","       hash2[ch] += 1","   end","   #byebug","   sorted2 = hash2.sort_by {|key, value| key}","   if sorted2.to_h == sorted1.to_h","       return true","   else","       return false","   end","   ","end"]}],[{"start":{"row":154,"column":0},"end":{"row":193,"column":3},"action":"remove","lines":["def can_tweak_sign?(normal_sign, vandalized_sign)","    normal_sign = normal_sign.downcase.gsub(/[^[:word:]\\s]/, \"\").gsub(/\\s+/, \"\")","    vandalized_sign = vandalized_sign.downcase.gsub(/[^[:word:]\\s]/, \"\").gsub(/\\s+/, \"\")","    length = vandalized_sign.length","    (normal_sign.length - length+1).times do |i|","        #byebug","        puts normal_sign[i..length-1+i]","        puts vandalized_sign","        if anagram(normal_sign[i..length-1+i], vandalized_sign)","            return true","        end","        i += 1","    end","    return false","end","","def character_count(str)","end","","def anagram(word1, word2) ","   hash1 = Hash.new(0)","   word1 = word1.chars","   word1.each do |ch|","       hash1[ch] += 1","   end","   sorted1 = hash1.sort_by { |key, value| key }","   hash2 = Hash.new(0)","   word2 = word2.chars","   word2.each do |ch|","       hash2[ch] += 1","   end","   #byebug","   sorted2 = hash2.sort_by {|key, value| key}","   if sorted2.to_h == sorted1.to_h","       return true","   else","       return false","   end","   ","end"],"id":5},{"start":{"row":154,"column":0},"end":{"row":186,"column":3},"action":"insert","lines":["def can_tweak_sign?(normal_sign, vandalized_sign)","    normal_sign = normal_sign.downcase.gsub(/[^[:word:]\\s]/, \"\").gsub(/\\s+/, \"\")","    vandalized_sign = vandalized_sign.downcase.gsub(/[^[:word:]\\s]/, \"\").gsub(/\\s+/, \"\")","    length = vandalized_sign.length","    if anagram(normal_sign, vandalized_sign)","        return true","    else","        return false","    end","end","","def character_count(str)","end","","def anagram(word1, word2) ","   hash1 = Hash.new(0)","   word1 = word1.chars","   word1.each do |ch|","       hash1[ch] += 1","   end","   hash2 = Hash.new(0)","   word2 = word2.chars","   word2.each do |ch|","       hash2[ch] += 1","   end","   #byebug","   hash2.each do |key, value|","      if value > hash1[key]","          return false","      end","   end","   return true","end"]}]]},"ace":{"folds":[],"scrolltop":2364.5,"scrollleft":0,"selection":{"start":{"row":177,"column":21},"end":{"row":177,"column":21},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":146,"state":"start","mode":"ace/mode/ruby"}},"timestamp":1548454048259,"hash":"a375afba16b9fc08efabf4270700b7b26a05d1ec"}